I intend to build a rainbow tables generator, which allows the user to have specified input. Generally, rainbow tables consist random characters (a-z,A-Z, etc.), previously set by the user and are usually found with string lengths of a maximum of nine characters. For some character sets, this could potentially take weeks to generate and use about a terabyte of space. However, if the user knows what an unhashed password looked like, they could create a much smaller table, in a shorter amount of time. This would potentially enable the user to create string lengths many times larger than what could be done before. Example: The password length is 35 characters long. This password looks like this: "(2,1,2 | 2015-4-10 12:21:35)1a5rf2". This can be simplified to a specified list of coordinates, the date of the day, a list of times, and a list of six character strings. The parentheses, separators, colons, and spaces are set the same in all cases, reducing the possible letter combinations to specific groups. There are 3.9495538704384×10^16 (7*30*24*60*60*36^6) possible passwords when you specialize the password generation process. Without the special case, it would be 42^35 which has a length of 57 decimal digits, compared to 17 decimal digits. 
To begin with, I would have predefined cases, which would likely be hardcoded. As in the password example above, the entry would be difficult to do. I would move from the hardcoded parameters, to having the user enter their choices from a list of potential options, such as: date, year, hour, minute, second, and random characters. From there, I could ask the user for the locations of each of those options in the string, the length of the random characters, and which random characters would be used. From there, use of recursion and user-defined ArrayLists would be the best option. I might later add more complex setting the user could select, or different hashing algorithms.
